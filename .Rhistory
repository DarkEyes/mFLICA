devtools::document()
getReachibleNodes(A$dyNetout$dyNetBinMat[,,190],1)$followers
devtools::document()
getReachibleNodes(A$dyNetout$dyNetBinMat[,,190],1)$followers
devtools::document()
getReachibleNodes(A$dyNetout$dyNetBinMat[,,190],1)$followers
devtools::document()
getReachibleNodes(A$dyNetout$dyNetBinMat[,,190],1)$followers
devtools::document()
getReachibleNodes(A$dyNetout$dyNetBinMat[,,190],1)$followers
getFactions(A$dyNetout$dyNetBinMat[,,190],1)$followers
getFactions(A$dyNetout$dyNetBinMat[,,190],1)
getFactions(A$dyNetout$dyNetBinMat[,,190])
?getFactions
# Given an example of adjacency matrix
A<-matrix(FALSE,5,5)
A[2,1]<-TRUE
A[c(3,4),2]<-TRUE
A[5,3]<-TRUE
# Get faction leaders and their memebers as well as a network density of each faction.
out<-getFactions(adjMat=A)
out
A
B<-list()
B
B[[1]]<-"www"
B[[2]]<-2
B
mod(10,3)
10%%3
9%%3
hostory()
history()
devtools::document()
?mFLICA
library(mFLICA)
?mFLICA
#' The Framework of Multiple-Faction Leadership Inference in Coordinated Activity or mFLICA
#'
#' @examples
#'
#' # Run the function
#'
#' obj1<-mFLICA(TS=mFLICA::TS[,1:200,],timeWindow=60,sigma=0.5)
#'
#'@export
#'
mFLICA <- function(TS,timeWindow,timeShift,sigma=0.50,silentFlag=FALSE) {
invN<-dim(TS)[1]
Tlength<-dim(TS)[2]
dimensionsN<-dim(TS)[3]
leadersTimeSeries<-list()
factionMembersTimeSeries<-list()
factionSizeRatioTimeSeries<- array(0,dim=c(invN,Tlength))
if(missing(timeWindow))
{
timeWindow<-ceiling(0.1*Tlength)
}
if(missing(timeShift))
{
timeShift<-max(1,ceiling(0.1*timeWindow))
}
dyNetOut<-getDynamicFollNet(TS=TS,timeWindow=timeWindow,timeShift=timeShift,sigma=sigma,silentFlag=silentFlag)
for(t in seq(1,Tlength))
{
currMat<-dyNetout$dyNetBinMat[,,t]
dyFactionout<-getFactions(currMat)
leadersTimeSeries[[t]]<-dyFactionout$leaders
factionMembersTimeSeries[[t]]<-dyFactionout$factionMembers
factionSizeRatioTimeSeries[,t]<-dyFactionout$factionSizeRatio
if(silentFlag == FALSE)
if(t%%timeWindow==1)
print(sprintf("Finding factions:t%d",t) )
}
value <- list(dyNetOut=dyNetOut) # outputs
attr(value, 'class') <- 'mFLICA'
value
}
devtools::document()
?mFLICA
devtools::document()
?mFLICA
devtools::document()
?mFLICA
obj1<-mFLICA(TS=mFLICA::TS[,1:200,],timeWindow=60,sigma=0.5)
devtools::document()
obj1<-mFLICA(TS=mFLICA::TS[,1:200,],timeWindow=60,sigma=0.5)
library(mFLICA)
obj1<-mFLICA(TS=mFLICA::TS[,1:200,],timeWindow=60,sigma=0.5)
library(mFLICA)
library(mFLICA)
obj1<-mFLICA(TS=mFLICA::TS[,1:200,],timeWindow=60,sigma=0.5)
library(mFLICA)
obj1<-mFLICA(TS=mFLICA::TS[,1:200,],timeWindow=60,sigma=0.5)
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries)
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries,TSnames=1:30)
devtools::document()
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries,TSnames=)
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries)
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
library(devtools)
document()
?mFLCIA
?mFLICA
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,1:200,],timeWindow=60,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
obj1$leadersTimeSeries[[200]]
obj1$leadersTimeSeries[[20]]
obj1$leadersTimeSeries[[2]]
obj1$factionMembersTimeSeries[[2]]
obj1$factionMembersTimeSeries[[t]][[1]]
obj1$factionMembersTimeSeries[[20]][[1]]
obj1$factionMembersTimeSeries[[20]][[2]]
obj1$factionMembersTimeSeries[[2]][[1]]
obj1$factionMembersTimeSeries[[2]][[2]]
obj1$factionMembersTimeSeries[[2]][[5]]
obj1$leadersTimeSeries[[2]][5]
obj1$leadersTimeSeries[[2]][1]
document()
?mFLICA
document()
?mFLICA
?followingRelation
?mFLICA
?followingRelation
document()
?mFLICA
document()
?mFLICA
document()
?mFLICA
document()
?mFLICA
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,1:200,],timeWindow=60,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
obj1<-mFLICA(TS=mFLICA::TS,timeWindow=60,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
plotMultipleTimeSeries(TS= obj1$dyNetOut$dyNetWeightedDensityVec)
obj1$leadersTimeSeries[400]
obj1$factionSizeRatioTimeSeries[400]
# Run the function
obj1<-mFLICA(TS=mFLICA::TS,timeWindow=60,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
obj1$factionSizeRatioTimeSeries[200]
obj1$factionSizeRatioTimeSeries[100]
obj1$factionSizeRatioTimeSeries[,1]
obj1$factionSizeRatioTimeSeries[,400]
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries[3,])
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries)
document()
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries)
obj1$leadersTimeSeries[150]
obj1$leadersTimeSeries[250]
obj1$leadersTimeSeries[350]
obj1$leadersTimeSeries[450]
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries,strTitle="Faction Size Ratios")
plotMultipleTimeSeries(TS=obj1$dyNetOut$dyNetBinDensityVec,strTitle="Time series of network Densities of dynamic following network")
plotMultipleTimeSeries(TS=obj1$dyNetOut$dyNetBinDensityVec,strTitle="Network densities of dynamic following network")
plotMultipleTimeSeries(TS=mFLICA::TS[,,1])
plotMultipleTimeSeries(TS=mFLICA::TS[,,2])
library(mFLICA)
plotMultipleTimeSeries(TS=mFLICA::TS[,,1],strTitle="x axis")
plotMultipleTimeSeries(TS=mFLICA::TS[,,2],strTitle="y axis")
library(mFLICA)
plotMultipleTimeSeries(TS=mFLICA::TS[,,1],strTitle="x axis")
plotMultipleTimeSeries(TS=mFLICA::TS[,,2],strTitle="y axis")
?mFLICA
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,201:400,],timeWindow=60,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,201:400,],timeWindow=30,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,201:400,],timeWindow=15,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,201:400,],timeWindow=60,sigma=0.7)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,201:400,],timeWindow=60,sigma=0.8)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,201:400,],timeWindow=60,sigma=0.25)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,201:400,],timeWindow=60,sigma=0.1)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
obj1$leadersTimeSeries[1]
obj1$leadersTimeSeries[100]
A<-obj1$dyNetOut$dyNetWeightedMat[,,100]
View(A)
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,201:400,],timeWindow=15,sigma=0.25)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
View(A)
A<-obj1$dyNetOut$dyNetWeightedMat[,,100]
View(A)
obj1<-mFLICA(TS=mFLICA::TS[,1:200,],timeWindow=60,sigma=0.5)
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
plotMultipleTimeSeries(TS=obj1$dyNetOut$dyNetBinDensityVec, strTitle="Faction Size Ratios")
plotMultipleTimeSeries(TS=obj1$dyNetOut$dyNetBinDensityVec, strTitle="Network Dnesity")
library(mFLICA)
library(mFLICA)
devtool::build()
devtools::build()
library(mFLICA)
library(mFLICA)
library(mFLICA)
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
remove.packages("mFLICA")
devtools::check()
devtools::check()
1
install.packages(c("roxygen2","devtools"))
install.packages(c("roxygen2","devtools"))
install.packages(c("EDOIF","VLTimeCausality"))
library(mFLICA)
install.packages(c("knitr"))
install.packages(c("knitr"))
install.packages("farver")
devtools::chcheck()
devtools::check()
devtools::check()
library(devtools)
check()
install.packages("knitr")
check()
install.packages("rmarkdown")
library(devtools)
document()
document()
?mFLICA::TS
check()
library(mFLICA)
?getDynamicFollNet
out<-getDynamicFollNet(TS=mFLICA::TS[,1:10,],timeWindow=5,timeShift = 5,sigma=0.5)
document()
?mFLICA
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=10,timeshift==10,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
?mFLICA
document()
?mFLICA
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=10,timeshift=10,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
document()
?mFLCIA
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=10,timeshift=10,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
mFLICA::mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=10,timeshift=10,sigma=0.5)
document()
mFLICA::mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=10,timeshift=10,sigma=0.5)
mFLICA::mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=10,sigma=0.5)
out<-getDynamicFollNet(TS=mFLICA::TS[,1:10,],timeWindow=5,timeShift = 5,sigma=0.5)
out<-getDynamicFollNet(TS=mFLICA::TS[,1:15,],timeWindow=5,timeShift = 5,sigma=0.5)
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=30,timeShift=30,sigma=0.5)
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=30,timeShift=10,sigma=0.5)
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=30,timeShift=50,sigma=0.5)
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=30,timeShift=5,sigma=0.5)
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=30,timeShift=10,sigma=0.5)
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=20,timeShift=10,sigma=0.5)
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=10,timeShift=10,sigma=0.5)
document()
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=10,timeShift=10,sigma=0.5)
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=20,timeShift=10,sigma=0.5)
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=30,timeShift=10,sigma=0.5)
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
document()
check()
document()
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=30,timeShift=10,sigma=0.5)
obj1<-mFLICA(TS=mFLICA::TS[,1:60,],timeWindow=30,sigma=0.5)
check()
check()
check()
obj1<-mFLICA(TS=mFLICA::TS[,1:30,],timeWindow=10,timeShift=10,sigma=0.5)
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
obj1<-mFLICA(TS=mFLICA::TS[,60:90,],timeWindow=10,timeShift=10,sigma=0.5)
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
build_manual()
build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
ls
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
library(mFLICA)
devtools::load_all(".")
library(mFLICA)
# mFLICA::TS[i,t,d] is an element of ith time series at time t in the dimension d. Here, we have only two dimensions: x and y. The time series length is 800, so, t is in the range [1,800]. There are 30 individuals, so, i is in the range [1,30].
plotMultipleTimeSeries(TS=mFLICA::TS[,,1],strTitle="x axis")
plotMultipleTimeSeries(TS=mFLICA::TS[,,2],strTitle="y axis")
devtools::check()
devtools::build()
devtools::document()
devtools::build_manual()
devtools::check()
leader<- mFLICA::TS[2,301:330,]
follower<- mFLICA::TS[3,301:330,]
out<-followingRelation(Y=follower,X=leader)
library(mFLICA)
leader<- mFLICA::TS[2,301:330,]
follower<- mFLICA::TS[3,301:330,]
out<-followingRelation(Y=follower,X=leader)
out
leader<- mFLICA::TS[2,301:310,]
follower<- mFLICA::TS[3,301:310,]
out<-followingRelation(Y=follower,X=leader)
out
leader<- mFLICA::TS[2,301:310,]
follower<- mFLICA::TS[3,301:310,]
out<-followingRelation(Y=follower,X=leader)
out
leader<- mFLICA::TS[2,301:310,]
follower<- mFLICA::TS[3,301:310,]
out<-followingRelation(Y=follower,X=leader,timeLagWindow = 5)
out
leader<- mFLICA::TS[2,301:360,]
follower<- mFLICA::TS[3,301:360,]
out<-followingRelation(Y=follower,X=leader,timeLagWindow = 5)
out
leader<- mFLICA::TS[2,301:360,]
follower<- mFLICA::TS[3,301:360,]
followingRelation(Y=follower,X=leader,lagWindow = 0.9)
leader<- mFLICA::TS[2,301:360,]
follower<- mFLICA::TS[3,301:360,]
followingRelation(Y=follower,X=leader,lagWindow = 0.1)
leader<- mFLICA::TS[2,301:360,]
follower<- mFLICA::TS[3,301:360,]
followingRelation(Y=follower,X=leader,lagWindow = 0.15)
leader<- mFLICA::TS[2,301:360,]
follower<- mFLICA::TS[3,301:360,]
dtw(x=follower,y=leader,keep.internals=TRUE,window.type = "sakoechiba" ,window.size=timeLagWindow)
leader<- mFLICA::TS[2,301:360,]
follower<- mFLICA::TS[3,301:360,]
dtw(x=follower,y=leader,keep.internals=TRUE,window.type = "sakoechiba" ,window.size=1)
leader<- mFLICA::TS[2,301:360,]
follower<- mFLICA::TS[3,301:360,]
alignment<-dtw(x=follower,y=leader,keep.internals=TRUE,window.type = "sakoechiba" ,window.size=10)
alignment
alignment$directionMatrix
leader<- mFLICA::TS[2,301:360,]
follower<- mFLICA::TS[3,301:360,]
alignment<-dtw(x=follower,y=leader,keep.internals=TRUE,window.type = "sakoechiba" ,window.size=1)
alignment$directionMatrix
leader<- mFLICA::TS[2,301:360,]
follower<- mFLICA::TS[3,301:360,]
followingRelation(Y=follower,X=leader,timeLagWindow = 1)
leader<- mFLICA::TS[2,301:360,2]
follower<- mFLICA::TS[3,301:360,2]
alignment<-dtw(x=follower,y=leader,keep.internals=TRUE,window.type = "sakoechiba" ,window.size=1)
leader<- mFLICA::TS[2,301:360,2]
follower<- mFLICA::TS[3,301:360,2]
followingRelation(Y=follower,X=leader,lagWindow = 0.1)
leader<- mFLICA::TS[2,301:360,2]
follower<- mFLICA::TS[3,301:360,2]
followingRelation(Y=follower,X=leader)
leader<- mFLICA::TS[2,301:360,1]
follower<- mFLICA::TS[3,301:360,1]
followingRelation(Y=follower,X=leader)
leader<- mFLICA::TS[2,301:360,2]
follower<- mFLICA::TS[3,301:360,2]
followingRelation(Y=follower,X=leader,lagWindow = 1)
leader<- mFLICA::TS[2,301:360,2]
follower<- mFLICA::TS[5,301:360,2]
followingRelation(Y=follower,X=leader,lagWindow = 1)
leader<- mFLICA::TS[2,301:360,1]
follower<- mFLICA::TS[5,301:360,1]
followingRelation(Y=follower,X=leader,lagWindow = 1)
library(devtools)
document()
check()
document()
?getDynamicFollNet
?mFLICA
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,60:90,],timeWindow=10,timeShift=10,lagWindow=1,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,200:300,],timeWindow=30,timeShift=10,lagWindow=1,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,200:300,],timeWindow=60,timeShift=1,lagWindow=1,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,200:300,1],timeWindow=60,timeShift=1,lagWindow=1,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
A<-getDynamicFollNet(TS=mFLICA::TS[,200:300,1],timeWindow=60,timeShift=1,lagWindow=1,sigma=0.5)
dim(mFLICA::TS[,200:300,1])
length(dim(mFLICA::TS[,200:300,1]))
length(dim(mFLICA::TS[,200:300,]))
A<-mFLICA::TS[,200:300,1]
array(0,c(dim(A),2))
B<-array(0,c(dim(A),2))
dim(B)
B[,,1]<-A
B
dim(B)
document()
# Run the function
A<-getDynamicFollNet(TS=mFLICA::TS[,200:300,1],timeWindow=60,timeShift=1,lagWindow=1,sigma=0.5)
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,250:320,],timeWindow=30,timeShift=3,lagWindow=1,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
# Run the function
obj1<-mFLICA(TS=mFLICA::TS[,250:320,1],timeWindow=30,timeShift=3,lagWindow=1,sigma=0.5)
# Plot time series of faction size ratios of all leaders
plotMultipleTimeSeries(TS=obj1$factionSizeRatioTimeSeries, strTitle="Faction Size Ratios")
dim(obj1$dyNetOut)
dim(obj1$dyNetOut[[1]])
dim(obj1$dyNetOut[[1]][,,5])
View(obj1$dyNetOut[[1]][,,5])
View(obj1$[[1]][,,20])
View(obj1$dyNetOut[[1]][,,20])
document()
check()
document
document()
build()
library(devtoolas)
library(devtools)
check()
check()
build_vignettes()
build_vignettes()
check()
check()
check()
build_vignettes()
check()
check()
build_vignettes()
build_vignettes()
build_vignettes()
library(devtools)
build_vignettes()
build_vignettes()
check()
library(devtools)
check()
help("R_GSCMD")
Sys.getenv("R_GSCMD")
?Sys.setenv
Sys.setenv(R_GSCMD = "C:\\Program Files (x86)\\gs\\gs9.52\\bin\\gswin64c.exe")
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.52\\bin\\gswin64c.exe")
Sys.getenv("R_GSCMD")
help("R_GSCMD")
Sys.getenv("R_GSCMD")
check()
check()
devtools::check()
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.52\\bin\gswin64c.exe")
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.52\\bin\\gswin64c.exe")
devtools::check()
tools::compactPDF(gs_quality = "ebook")
devtools::check()
?devtools::build_vignettes
--compact-vignettes.
?devtools::build
check()
devtools::check()
devtools::build(args = '--compact-vignettes')
library(devtools)
document()
document()
document()
devtools::document()
devtools::build(args = '--compact-vignettes')
llibrary(devtools)
library(devtools)
document()
document()
document()
document()
document()
install.packages("R.rsp")
