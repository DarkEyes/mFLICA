alignment$index1[1:T]-alignment$index2[1:T]
alignment<-dtw(x=X,y=Y)
alignment$index1[1:T]-alignment$index2[1:T]
alignment<-dtw(x=X,y=Y)
1:T-alignment$index2[1:T]
devtools::load_all(".")
mFLICA::followingRelation(X=X,Y=Y)$follVal
mFLICA::followingRelation(X=Y,Y=X)$follVal
install.packages("adjustedcranlogs")
library(adjustedcranlogs)
library(ggplot2)
library(dplyr)
library(lubridate)
mypkgdownloads = adj_cran_downloads("EDOIF",from = "2019-11-15", to = "2019-12-20")
mypkgdownloads %>%
ggplot() +
geom_line(aes(x=date,y=adjusted_total_downloads)) +
geom_line(aes(x=date,y=total_downloads),color="red",linetype="dashed") +
annotate("text",y=400,x=dmy("01-10-2017"),label="Raw Downloads",color="red") +
annotate("text",y=50,x=dmy("20-10-2017"),label="Adjusted Downloads",color="black") +
theme_minimal()
mypkgdownloads = adj_cran_downloads("EDOIF",from = "2019-11-15", to = "2019-12-19")
mypkgdownloads = adj_cran_downloads("EDOIF",from = "2019-11-15", to = "2019-12-18")
mypkgdownloads = adj_cran_downloads("EDOIF",from = "2019-11-25", to = "2019-12-18")
mypkgdownloads = adj_cran_downloads("EDOIF",from = "2019-12-02", to = "2019-12-18")
mypkgdownloads = adj_cran_downloads("EDOIF",from = "2019-12-03", to = "2019-12-18")
mypkgdownloads = adj_cran_downloads("EDOIF",from = "2019-12-03", to = "2019-12-15")
mypkgdownloads = adj_cran_downloads("ggplot2",from = "2019-12-03", to = "2019-12-15")
mypkgdownloads = adj_cran_downloads("EDOIF",from = "2019-12-03", to = "2019-12-15")
mypkgdownloads = adj_cran_downloads("EDOIF",from = "2019-12-05", to = "2019-12-15")
mFLICA::
devtools::load_all(".")
mFLICA::asymmetric
mFLICA::TS
1+1
devtools::load_all(".")
dim(mFLICA::TS)
T
T<-dim(mFLICA::TS)[2]
T
abs(-3)
A<-matrix(0,N,N)
A<-matrix(0,2,2)
A==0
as.numeric(A==0)
as.matrix(A==0)
library(mFLICA)
library(mFLICA)
followingNetwork(TS=mFLCIA::TS)
library(mFLICA)
mFLICA::followingNetwork(TS=mFLCIA::TS)
devtools::load_all(".")
library(mFLICA)
mFLICA::followingNetwork(TS=mFLCIA::TS)
library(mFLICA)
mFLICA::followingNetwork(TS=mFLCIA::TS)
mFLICA::TS
library(mFLICA)
mFLICA::followingNetwork(TS=mFLCIA::TS)
library(mFLICA)
library(mFLICA)
mFLICA::followingNetwork(TS=mFLCIA::TS)
library(mFLICA)
library(mFLICA)
mFLICA::followingNetwork(TS=mFLCIA::TS)
library(mFLICA)
mFLICA::followingNetwork(TS=mFLCIA::TS)
library(mFLICA)
mFLICA::followingNetwork(TS=mFLCIA::TS)
devtools::document()
library(mFLICA)
mFLICA::followingNetwork(TS=mFLCIA::TS)
library(mFLICA)
library(mFLICA)
mFLICA::followingNetwork(TS=mFLCIA::TS)
q
q()
library(mFLICA)
followingNetwork(TS=mFLCIA::TS)
mFLCIA::TS
library(mFLICA)
followingNetwork(TS=mFLICA::TS)
library(mFLICA)
followingNetwork(TS=mFLICA::TS[,1:60,])
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,1:30,])
data.matrix(out$adjBinMat)
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,30:60,])
data.matrix(out$adjBinMat)
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,1:60,])
out<-followingNetwork(TS=mFLICA::TS[,1:60,])
out$adjWeightedMat
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,60:120,])
out$adjWeightedMat
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,60:120,],sigma=0.5)
out$adjWeightedMat
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,60:120,],sigma=0.5)
out$adjBinMat
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,60:120,],sigma=0.5)
getADJNetDen(out$adjBinMat)
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,1:120,],sigma=0.5)
getADJNetDen(out$adjBinMat)
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,1:60,],sigma=0.5)
getADJNetDen(out$adjBinMat)
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,60:120,],sigma=0.5)
getADJNetDen(out$adjBinMat)
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,160:220,],sigma=0.5)
getADJNetDen(out$adjBinMat)
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,300:360,],sigma=0.5)
getADJNetDen(out$adjBinMat)
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,260:320,],sigma=0.5)
getADJNetDen(out$adjBinMat)
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,60:120,],sigma=0.5)
getADJNetDen(out$adjBinMat)
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,60:90,],sigma=0.5)
getADJNetDen(out$adjBinMat)
length(mFLICA::TS[1,,1])
devtools::document()
devtools::document()
?followingNetwork
out<-followingNetwork(TS=mFLICA::TS[,60:90,],sigma=0.5)
out<-followingNetwork(TS=mFLICA::TS[,60:90,],sigma=0.5)
out
out<-followingNetwork(TS=mFLICA::TS[,60:90,],sigma=0.5)
library(mFLICA)
out<-followingNetwork(TS=mFLICA::TS[,60:90,],sigma=0.5)
getADJNetDen(out$adjBinMat)
out<-followingNetwork(TS=mFLICA::TS[,60:90,],sigma=0.5)
A<-c()
A<-c(A,1)
A<-c(A,1)
A<-c(A,2)
A<-A[-1]
A<-A[-1]
A<-A[-1]
numeric(0,2)
numeric(2)
numeric(3)
A<-out$adjBinMat
A[1,]
A[,1]
B<-1:30
B[A[,1]]
logical(2)
C<-logical(2)
C<-logical(5)
C[c(2,3)]<-TRUE
C
C<-B[A[,1]]
C
length(C)
IDs<-1:30
IDs[adjMat[,30]]
adjMat<-out$adjBinMat
IDs[adjMat[,30]]
length(IDs[adjMat[,30]])
length(IDs[adjMat[,1]])
A<-locial(5)
A<-logical(5)
A[c(2,3)]<-TREU
A[c(2,3)]<-TRUE
!A
A<-matrix(3,3)
A
A<-matrix(FALSE,3,3)
A
A[2,1]<-TRUE
A[3,2]<-TRUE
A
library(mFLICA)
getReachibleNodes(A,1)
library(mFLICA)
devtools::document()
library(mFLICA)
mFLICA::getReachibleNodes(A,1)
-dim(A)[1]
dim(A)[1]
library(mFLICA)
mFLICA::getReachibleNodes(A,1)
library(mFLICA)
mFLICA::getReachibleNodes(A,1)
library(mFLICA)
library(mFLICA)
mFLICA::getReachibleNodes(A,1)
mFLICA::getReachibleNodes(A,2)
mFLICA::getReachibleNodes(A,3)
mFLICA::getReachibleNodes(out$adjBinMat,1)
mFLICA::getReachibleNodes(out$adjBinMat,2)
mFLICA::getReachibleNodes(out$adjBinMat,30)
mFLICA::getReachibleNodes(out$adjBinMat,4)
mFLICA::getReachibleNodes(out$adjBinMat,3)
mFLICA::getReachibleNodes(out$adjBinMat,6)
A<-matrix(FALSE,4,4)
A[2,1]<-TRUE
A[3,2]<-TRUE
A[4,3]<-TRUE
A[4,2]<-TRUE
A
mFLICA::getReachibleNodes(A,1)
mFLICA::getReachibleNodes(A,2)
mFLICA::getReachibleNodes(A,3)
mFLICA::getReachibleNodes(A,4)
library(mFLICA)
mFLICA::getReachibleNodes(A,4)
mFLICA::getReachibleNodes(A,1)
f<-mFLICA::getReachibleNodes(A,1)$followers
f
A[f,f]
A
sum(A)
sum(A,1)
sumrow(A)
rowsum(A)
rowSums(A)
colSums(A)
rowSums(A)
devtools::document()
mFLICA
mFLICA::getFactions(A)
mFLICA::getFactions(A)
devtools::document()
mFLICA::getFactions(A)
mFLICA::getFactions(out$adjBinMat)
numeric(3)
B<-list()
B
B[[1]]<-"2"
B[[2]]<-"2"
append(append,3)
append(B,3)
append(B,3)
append(B,3)
B<-append(B,3)
B
B<-append(B,3)
B
devtools::document()
mFLICA::getFactions(A)
devtools::document()
mFLICA::getFactions(A)
A<-matrix(FALSE,5,5)
A[c(2,3),1]<-TRUE
A[4,5]<-TRUE
A
getFactions(A)
mFLICA::getFactions(out$adjBinMat)
devtools::document()
?getReachibleNodes
devtools::document()
?getReachibleNodes
# Given an example of adjacency matrix
A<-matrix(FALSE,5,5)
A[2,1]<-TRUE
A[c(3,4),2]<-TRUE
A[5,3]<-TRUE
# Get a set of reachable nodes of targetNode.
followers<-getReachibleNodes(adjMat=A,targetNode=1)$followers
followers
?getReachibleNodes
?getReachibleNodes
?followingRelation
devtools::document()
?followingRelation
A
sum(A)
library(mFLICA)
library(mFLICA)
A
?getFactions
# Given an example of adjacency matrix
A<-matrix(FALSE,5,5)
A[2,1]<-TRUE
A[c(3,4),2]<-TRUE
A[5,3]<-TRUE
# Get faction leaders and their memebers as well as a network density of each faction.
out<-getReachibleNodes(adjMat=A)
getReachibleNodes(adjMat=A)
A
getReachibleNodes(A,1)
getReachibleNodes(A,2)
getReachibleNodes(A,3)
getReachibleNodes(A,4)
getReachibleNodes(A,5)
getReachibleNodes(A,1)
library(mFLICA)
getReachibleNodes(A,1)
getFactions(A)
devtools::document()
?getFactions
# Given an example of adjacency matrix
A<-matrix(FALSE,5,5)
A[2,1]<-TRUE
A[c(3,4),2]<-TRUE
A[5,3]<-TRUE
# Get faction leaders and their memebers as well as a network density of each faction.
out<-getFactions(adjMat=A)
?getFactions
devtools::document()
?getFactionSizeRatio
# Given an example of adjacency matrix
A<-matrix(FALSE,5,5)
A[2,1]<-TRUE
A[c(3,4),2]<-TRUE
# Get a faction size ratio of a given faction
getFactionSizeRatio(adjMat=A,members=c(1,2,3,4))
?getADJNetDen
# Given an example of adjacency matrix
A<-matrix(FALSE,5,5)
A[2,1]<-TRUE
A[c(3,4),2]<-TRUE
# Get a network density of an adjacency matrix
getADJNetDen(adjMat=A)
?followingNetwork
# Run the function
out<-followingNetwork(TS=mFLICA::TS[,60:90,],sigma=0.5)
out
?followingRelation
# Load example data
leader<- mFLICA::TS[1,1:200,]
follower<- mFLICA::TS[2,1:200,]
# Run the function
out<-followingRelation(Y=follower,X=leader)
out
?getFactions
# Given an example of adjacency matrix
A<-matrix(FALSE,5,5)
A[2,1]<-TRUE
A[c(3,4),2]<-TRUE
A[5,3]<-TRUE
# Get faction leaders and their memebers as well as a network density of each faction.
out<-getFactions(adjMat=A)
out
devtools::document
devtools::document()
sample
sample(x=1:10)
sample(x=1:10, size =2)
sample(x=1:10, size =2)
round(10.5)
round(10.6)
round(10.51)
round(10.51)
sample(x=1:10, size =2)
sample(x=1:10, size =2)
set.seed(2020)
sample(x=1:10, size =2)
set.seed(2020)
sample(x=1:10, size =2)
install.packages("radmixture")
download.file(url = 'https://github.com/wegene-llc/radmixture/raw/master/data/globe4.alleles.RData', destfile = '~/R/globe4.alleles.RData')
download.file(url = 'https://github.com/wegene-llc/radmixture/raw/master/data/globe4.4.F.RData', destfile = '~/R/globe4.4.F.RData')
load('/path/to/globe4.alleles.RData')
load('/path/to/globe4.4.F.RData')
load("~/R/globe4.alleles.RData")
load("~/R/globe4.4.F.RData")
# Use K4
res <- tfrdpub(genotype, 4, globe4.alleles, globe4.4.F)
# Use K7b
res <- tfrdpub(genotype, 7, K7b.alleles, K7b.7.F)
# Use world9
res <- tfrdpub(genotype, 9, world9.alleles, world9.9.F)
# Use E11
res <- tfrdpub(genotype, 11, e11.alleles, e11.11.F)
# Use K12b
res <- tfrdpub(genotype, 12, K12b.alleles, K12b.12.F)
# Use K13
res <- tfrdpub(genotype, 13, globe13.alleles, globe13.13.F)
genotype <- read.table(file = '~/R/globe4.4.F.RData')
res <- tfrdpub(genotype, 4, globe4.alleles, globe4.4.F)
library(radmixture)
res <- tfrdpub(genotype, 4, globe4.alleles, globe4.4.F)
View(globe4.4.F)
res <- tfrdpub( 4, globe4.alleles, globe4.4.F)
?tfrdpub
download.file(url = 'https://github.com/wegene-llc/radmixture/
raw/master/data/globe4.alleles.RData', destfile = 'K4.RData')
download.file(url = 'https://github.com/wegene-llc/radmixture/
raw/master/data/globe4.4.F.RData', destfile = 'K4f.RData')
load('K4.RData')
load('K4f.RData')
res <- tfrdpub(genotype, 4, globe4.alleles, globe4.4.F)
devtools::install_github("wegene-llc/radmixture")
View(globe4.4.F)
View(globe4.4.F)
View(globe4.alleles)
?radmixture
remove.packages("radmixture")
remove.packages("radmixture")
BiocManager::install("LEA")
library(LEA)
input.file = "http://membres-timc.imag.fr/Olivier.Francois/secondary_contact.str"
LEA::snmf
?LEA::snmf
data("tutorial")
library(LEA)
data("tutorial")
write.geno(tutorial.R, "genotypes.geno")
View(tutorial.R)
project.snmf = snmf("genotypes.geno",
K = 1:10,
entropy = TRUE,
repetitions = 10,
project = "new")
project.snmf
project.snmfQ
project.snmf$Q
View(project.snmf)
project.snmf[[1]]$
1
project.snmf[[1]]
obj.snmf = snmf("genotypes.geno", K = 3, alpha = 100, project = "new")
qmatrix = Q(obj.snmf, K = 3)
View(qmatrix)
barplot(t(qmatrix), col = c("orange","violet","lightgreen"), border = NA, space = 0,
xlab = "Individuals", ylab = "Admixture coefficients")
install.packages("radmixture")
install.packages("radmixture")
library(LEA)
obj.snmf = snmf("genotypes.geno", K = 3, alpha = 100, project = "new")
qmatrix = Q(obj.snmf, K = 3)
barplot(t(qmatrix), col = c("orange","violet","lightgreen"), border = NA, space = 0,
xlab = "Individuals", ylab = "Admixture coefficients")
obj.snmf = snmf("genotypes.geno", K = 3, alpha = 100, project = "new")
qmatrix = Q(obj.snmf, K = 3)
barplot(t(qmatrix), col = c("orange","violet","lightgreen"), border = NA, space = 0,
xlab = "Individuals", ylab = "Admixture coefficients")
obj.snmf = snmf("genotypes.geno", K = 3, alpha = 100, project = "new")
qmatrix = Q(obj.snmf, K = 2)
obj.snmf = snmf("genotypes.geno", K = 2, alpha = 100, project = "new")
qmatrix = Q(obj.snmf, K = 2)
barplot(t(qmatrix), col = c("orange","violet","lightgreen"), border = NA, space = 0,
xlab = "Individuals", ylab = "Admixture coefficients")
obj.snmf = snmf("genotypes.geno", K = 4, alpha = 100, project = "new")
qmatrix = Q(obj.snmf, K = 4)
barplot(t(qmatrix), col = c("orange","violet","lightgreen"), border = NA, space = 0,
xlab = "Individuals", ylab = "Admixture coefficients")
citation(LEA)
citation("LEA")
out<-mFLICA::getDynamicFollNet(mFLICA::TS)
library(mFLICA)
library(mFLICA)
out<-dyNetBinDensityVec(mFLICA::TS)
out<-mFLICA::dyNetBinDensityVec(mFLICA::TS)
out<-getDynamicFollNet(mFLICA::TS)
plot(out$dyNetBinDensityVec)
VLTimeCausality::plotTimeSeries(X=out$dyNetBinDensityVec)
VLTimeCausality::plotTimeSeries(X=out$dyNetBinDensityVec,Y=out$dyNetWeightedMat)
VLTimeCausality::plotTimeSeries(X=out$dyNetBinDensityVec,Y=out$dyNetWeightedDensityVec)
VLTimeCausality::plotTimeSeries(Y=mFLICA::TS[1,:,1],X=mFLICA::TS[1,:,2])
VLTimeCausality::plotTimeSeries(Y=mFLICA::TS[1,,1],X=mFLICA::TS[1,,2])
VLTimeCausality::plotTimeSeries(Y=mFLICA::TS[1,,1],X=mFLICA::TS[1,,2],TSnames=c("Time Series #1","Time Series #2"))
devtools::document()
?plotMultipleTimeSeries
plotTimeSeries(TS=mFLICA::TS[1:2,,1])
plotMultipleTimeSeries(TS=mFLICA::TS[1:2,,1])
plotMultipleTimeSeries(TS=mFLICA::TS[1:2,,1])
TSnames<-c()
TSnames[1]<-"test"
TSnames[2]<-"test"
plotMultipleTimeSeries(TS=mFLICA::TS[1:2,,1])
plotMultipleTimeSeries(TS=mFLICA::TS[1:2,,1])
library(mFLICA)
devtools::document()
?plotMultipleTimeSeries
plotMultipleTimeSeries(TS=mFLICA::TS[1:2,,1])
plotMultipleTimeSeries(TS=mFLICA::TS[1:2,,1])
dim(mFLICA::TS[1:2,,1])
dim(mFLICA::TS[1:2,,1])[2]
library(mFLICA)
plotMultipleTimeSeries(TS=mFLICA::TS[1:2,,1])
library(mFLICA)
plotMultipleTimeSeries(TS=mFLICA::TS[1:2,,1])
library(mFLICA)
plotMultipleTimeSeries(TS=mFLICA::TS[1:2,,1])
library(mFLICA)
plotMultipleTimeSeries(TS=mFLICA::TS[1:2,,1])
plotMultipleTimeSeries(TS=mFLICA::TS[c(1,19),,1])
plotMultipleTimeSeries(TS=mFLICA::TS[c(1,19),1:200,1])
plotMultipleTimeSeries(TS=mFLICA::TS[c(1,19),1:20,1])
plotMultipleTimeSeries(TS=mFLICA::TS[c(1,2,3),1:20,1])
plotMultipleTimeSeries(TS=mFLICA::TS[c(1,2,3),1:80,1])
plotMultipleTimeSeries(TS=mFLICA::TS[c(1,2,3),1:60,1])
plotMultipleTimeSeries(TS=mFLICA::TS[1:5,1:60,1])
plotMultipleTimeSeries(TS=mFLICA::TS[1:5,1:60,1],TSnames=c("1","1","1","1","1"))
plotMultipleTimeSeries(TS=mFLICA::TS[1:5,1:60,1],TSnames=c("1","2","3","4","5"))
out<-getDynamicFollNet(TS=mFLICA::TS[,1:200,],sigma=0.5)
plotMultipleTimeSeries(TS=rbind(out$dyNetBinDensityVec,out$dyNetWeightedDensityVec) )
plotMultipleTimeSeries(TS=rbind(out$dyNetBinDensityVec,out$dyNetWeightedDensityVec) )
library(mFLICA)
plotMultipleTimeSeries(TS=rbind(out$dyNetBinDensityVec,out$dyNetWeightedDensityVec) )
plotMultipleTimeSeries(TS=rbind(out$dyNetBinDensityVec,out$dyNetWeightedDensityVec),TSnames=c("dyNetBinDensityVec","dyNetWeightedDensityVec") )
devtools::document()
library(mFLICA)
?getDynamicFollNet
# Run the function
out<-getDynamicFollNet(TS=mFLICA::TS[,1:200,],timeWindow=60,sigma=0.5)
# Plot time series of dynamic network densities
plotMultipleTimeSeries(TS=rbind(out$dyNetBinDensityVec,out$dyNetWeightedDensityVec),TSnames=c("dyNetBinDensityVec","dyNetWeightedDensityVec") )
